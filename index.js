const telegramBot = require('node-telegram-bot-api');
const debug = require('./helpers');
const writeJson = require('./jsonwriter');
const Token = '1253383008:AAEUb4MA_3W-g7cus2vzw002slIeLElAPgk';

const aboutText = `<strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–π—Ç–µ GrapeProg</strong>
    <pre>GrapeProg , –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –∏ —Å–º–µ–∂–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.
–≠—Ç–æ—Ç —Å–∞–π—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–ª–æ—â–∞–¥–∫–æ–π –¥–ª—è –æ–±—â–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π, –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–∞—é—â–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤.
–°—á–∏—Ç–∞—é, —á—Ç–æ –ø—Ä–∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ —ç—Ç–æ–π –∏–¥–µ–∏ –º–æ–∂–Ω–æ –¥–æ–±–∏—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–ª–æ–¥—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ IT
‚ñ™–æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ (–¥–æ–±–∏—Ç—å—Å—è —Å–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞)
‚ñ™–ø—Ä–∏–≤–ª–µ—á—å –≤—ã—Å—à–∏–µ —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ —É—á–µ–±–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
‚ñ™—Å–æ–∑–¥–∞—Ç—å —Å—Ä–µ–¥—É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
‚ñ™–ø—Ä–∏–≤–ª–µ—á—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.</pre>`
const siteText = '–°–æ–≤–µ—Ç—É—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—åü§ñ \r\n' + 'https://grape-proger.000webhostapp.com/';
const reposRef = 'üçá–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞ \r\n' + 'https://github.com/angular654/Grape-prog';
const gameRef = '–ò–≥—Ä–∞ –ø—Ä–æ COVID-19:https://vladimirprog.itch.io/covid-19-simulatorcorona-strike/download/eyJleHBpcmVzIjoxNTkyODUwMzQxLCJpZCI6NjcxNzg1fQ%3d%3d.S7%2b0DrS1yu0z8ZDNG1ypSul4gM0%3d'
const helpText = `<strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞</strong>
<pre>
hello - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ 
/about - –æ —Å–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞
/site - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞
/repos - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ—Å–∏—Ç–æ—Ä–∏–π github
/game - –∏–≥—Ä–∞ 
node_debug - for develop))
write_json - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
image - —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 
help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
open_keyboard - –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
</pre>`
console.log("Bot works!");
const bot = new telegramBot(Token, {
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
})

var notes = [];

bot.on('message', (msg) => {
    const { id } = msg.chat;
    if (msg.text === '/about') {
        bot.sendMessage(id, aboutText, { parse_mode: 'HTML' })
    } else if (msg.text.toLowerCase() === 'hello') {
        bot.sendMessage(id, `Hello ${msg.from.first_name}`)
    } else if (msg.text === '/site') {
        bot.sendMessage(id, siteText)
    } else if (msg.text === '/repos') {
        bot.sendMessage(id, reposRef)
    } else if (msg.text === '/game') {
        bot.sendMessage(id, gameRef)
    }
    else if (msg.text === 'node_debug') {
        bot.sendMessage(id, debug(msg))
    }
    else if (msg.text === 'write_json') {
        bot.sendMessage(id, `${msg.from.first_name} –≤–∞—à–µ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!`)
        writeJson(msg);
    }
    else if (msg.text === 'image') {
        randomPic = Math.floor(Math.random() * Math.floor(9));
        bot.sendPhoto(id, 'images/web' + randomPic.toString() + '.jpg', {
            caption: 'Webüçá'
        })
    }
    else if (msg.text === '–ê–≤—Ç–æ—Ä –±–æ—Ç–∞') {
        var authorlink = 'https://github.com/angular654';
        var botRepos = 'https://github.com/angular654/TelegramBot';
        bot.sendMessage(id, `Created by ${authorlink} \r\n` + `Bot repository :${botRepos}`);
    }
    else if (msg.text === 'help') {
        bot.sendMessage(id, helpText, { parse_mode: 'HTML' })
    }
    else if (msg.text === 'open_keyboard' || '/start') {
        bot.sendMessage(id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞', {
            reply_markup: {
                keyboard: [
                    [
                        {
                            text: '–ê–≤—Ç–æ—Ä –±–æ—Ç–∞'

                        }, 
                        {
                            text: 'help'
                        },
                        {
                            text: 'image'
                        }
                    ],
                ],
                one_time_keyboard: false
            }
        })
    }
})
